# Shiny app for miRNA qPCR analysis

library(shiny)
library(readxl)
library(dplyr)
library(ggplot2)

ui <- fluidPage(
  titlePanel("miRNA qPCR Analysis"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Upload Excel File", accept = c(".xlsx")),
      helpText("Excel file must have columns: Well, Fluor, Target, Sample, Cq, Cq Mean, Type, Sd"),
      uiOutput("targetSelector"),
      uiOutput("barTargetSelector")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Dot Plots", uiOutput("dotPlotsUI")),
        tabPanel("Bar Plot", plotOutput("barPlot")),
        tabPanel("Table", tableOutput("summaryTable"))
      )
    )
  )
)

server <- function(input, output) {

  # Reactive expression to load and process raw data, removing NA
  rawData <- reactive({
    req(input$file)
    df <- read_excel(input$file$datapath)
    df <- df %>% filter(!is.na(`Cq Mean`) & !is.na(Target) & !is.na(Type))
    return(df)
  })

  # Summary means for table
  dataInput <- reactive({
    df <- rawData()
    df_means <- df %>%
      group_by(Target, Type) %>%
      summarise(mean_Cq = mean(`Cq Mean`, na.rm = TRUE),
                sd_Cq = sd(`Cq Mean`, na.rm = TRUE), .groups = "drop")
    return(df_means)
  })

  # Dynamic UI for dot plot target selection
  output$targetSelector <- renderUI({
    df <- rawData()
    targets <- unique(df$Target)
    checkboxGroupInput("selectedTargets", "Select miRNAs for dot plots:",
                       choices = targets, selected = targets)
  })

  # Dynamic UI for bar plot target selection
  output$barTargetSelector <- renderUI({
    df <- rawData()
    targets <- unique(df$Target)
    targets <- targets[!targets %in% c("U6", "UniSP6")]
    checkboxGroupInput("selectedBarTargets", "Select miRNAs for bar plot:",
                       choices = targets, selected = targets)
  })

  # Generate dot plots per target showing individual samples
  output$dotPlotsUI <- renderUI({
    df <- rawData()
    targets <- input$selectedTargets
    if (is.null(targets)) return(NULL)

    plot_output_list <- lapply(targets, function(tg) {
      plotname <- paste0("plot_", tg)
      plotOutput(plotname, height = 300)
    })

    do.call(tagList, plot_output_list)
  })

  observe({
    df <- rawData()
    targets <- input$selectedTargets
    if (is.null(targets)) return(NULL)

    for (tg in targets) {
      local({
        tg_local <- tg
        plotname <- paste0("plot_", tg_local)
        output[[plotname]] <- renderPlot({
          df_subset <- df %>% filter(Target == tg_local & !is.na(`Cq Mean`) & !is.na(Type))
          ggplot(df_subset, aes(x = Type, y = `Cq Mean`, color = Type)) +
            geom_jitter(width = 0.2, size = 3, alpha = 0.7) +
            stat_summary(fun = mean, geom = "point", shape = 18, size = 5, color = "black",
                         position = position_dodge(width = 0.5)) +
            scale_color_manual(values = c("Normal" = "grey", "Tumor" = "darkred")) +
            labs(title = paste("Cq values for", tg_local), y = "Cq", x = "") +
            theme_minimal()
        })
      })
    }
  })

  # Bar Plot: 1 bar for overall N average + selected Tumor averages
  output$barPlot <- renderPlot({
    df <- rawData()
    # Exclude U6 and UniSP6
    df <- df %>% filter(!Target %in% c("U6", "UniSP6"))

    selectedTargets <- input$selectedBarTargets
    if (is.null(selectedTargets)) selectedTargets <- unique(df$Target)

    # Overall N average
    n_avg <- df %>% filter(Type == "Normal") %>% summarise(mean_Cq = mean(`Cq Mean`, na.rm = TRUE)) %>% pull(mean_Cq)

    # Tumor averages per selected miRNA
    t_avgs <- df %>% filter(Type == "Tumor" & Target %in% selectedTargets) %>%
      group_by(Target) %>%
      summarise(mean_Cq = mean(`Cq Mean`, na.rm = TRUE))

  library(tibble)
  bar_data <- bind_rows(
    tibble(Label = "Normal_avg", mean_Cq = n_avg, Group = "Normal"),
    tibble(Label = t_avgs$Target, mean_Cq = t_avgs$mean_Cq, Group = "Tumor")
  )

  # Preserve order (Normal first, then tumors in the order produced)
  bar_data$Label <- factor(bar_data$Label, levels = bar_data$Label)

  ggplot(bar_data, aes(x = Label, y = mean_Cq, fill = Group)) +
    geom_col(width = 0.6) +
    # show numbers on top (optional) â€” uncomment next line to enable
    # geom_text(aes(label = round(mean_Cq,2)), vjust = -0.5, size = 3) +
    scale_fill_manual(values = c("Normal" = "grey", "Tumor" = "darkred")) +
    labs(title = "Average Cq: Normal + Tumor miRNAs", y = "Mean Cq", x = "") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
})

  # Summary Table
  output$summaryTable <- renderTable({
    dataInput()
  })
}

shinyApp(ui = ui, server = server)
