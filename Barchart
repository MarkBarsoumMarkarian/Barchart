# Shiny app for miRNA qPCR analysis with Fold Change and ROC curves
# Fixed ROC formulas for miRNAs with special characters and scale 0-1

library(shiny)
library(readxl)
library(dplyr)
library(ggplot2)
library(stringr)
library(pROC)
library(tidyr)

ui <- fluidPage(
  titlePanel("miRNA qPCR Analysis - Fold Change"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Upload Excel File", accept = c(".xlsx")),
      helpText("Excel file must have columns: Well, Fluor, Target, Sample, Cq, Cq Mean, Type, Sd"),
      uiOutput("targetSelector"),
      uiOutput("barTargetSelector"),
      helpText("Bar plot shows average of all Normal miRNAs (1 bar) and Tumor averages per miRNA.")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Dot Plots", uiOutput("dotPlotsUI")),
        tabPanel("Bar Plot", plotOutput("barPlot", height = 400)),
        tabPanel("Table (per-miRNA means)", tableOutput("summaryTable")),
        tabPanel("ROC Curves", plotOutput("allROCPlots", height = 400))
      )
    )
  )
)

server <- function(input, output) {

  rawData <- reactive({
    req(input$file)
    df <- read_excel(input$file$datapath)
    names(df) <- make.names(names(df))  # clean column names
    df <- df %>% filter(!is.na(Cq.Mean), !is.na(Target), !is.na(Type)) %>%
      filter(!str_detect(Type, regex("^NTC$", ignore_case = TRUE)))
    return(df)
  })

  foldChangeData <- reactive({
    df <- rawData()
    df <- df %>% filter(Type %in% c("Normal", "Tumor"))

    normalizer <- df %>%
      filter(Target %in% c("U6","UniSP6")) %>%
      group_by(Sample) %>%
      summarise(normalizer_Cq = mean(Cq.Mean, na.rm = TRUE), .groups="drop")

    delta_cq <- df %>%
      filter(!Target %in% c("U6","UniSP6")) %>%
      left_join(normalizer, by="Sample") %>%
      mutate(delta_Cq = Cq.Mean - normalizer_Cq)

    normal_avg <- delta_cq %>%
      filter(Type=="Normal") %>%
      group_by(Target) %>%
      summarise(avg_normal_delta_Cq = mean(delta_Cq, na.rm=TRUE), .groups="drop")

    fold_change_df <- delta_cq %>%
      left_join(normal_avg, by="Target") %>%
      mutate(delta_delta_Cq = delta_Cq - avg_normal_delta_Cq,
             fold_change = 2^(-delta_delta_Cq))
    return(fold_change_df)
  })

  perMiRNAMeans <- reactive({
    foldChangeData() %>%
      group_by(Target, Type) %>%
      summarise(mean_fold_change = mean(fold_change, na.rm=TRUE),
                sd_fold_change   = sd(fold_change, na.rm=TRUE),
                n = n(),
                .groups="drop")
  })

  output$targetSelector <- renderUI({
    targets <- unique(foldChangeData()$Target)
    checkboxGroupInput("selectedTargets", "Select miRNAs for dot plots:",
                       choices = targets, selected = targets)
  })

  output$barTargetSelector <- renderUI({
    targets <- unique(foldChangeData()$Target)
    checkboxGroupInput("selectedBarTargets", "Select miRNAs included in bar plot:",
                       choices = targets, selected = targets)
  })

  output$dotPlotsUI <- renderUI({
    req(input$selectedTargets)
    plotOutput("allDotPlots", height = 400 + 120*ceiling(length(input$selectedTargets)/3))
  })

  output$allDotPlots <- renderPlot({
    df <- foldChangeData()
    req(input$selectedTargets)
    df_subset <- df %>% filter(Target %in% input$selectedTargets)
    ggplot(df_subset, aes(x = Type, y = fold_change, color = Type)) +
    geom_boxplot()+
      geom_jitter(position = position_jitterdodge(jitter.width=0.1,dodge.width=0.5),
                  size=2.5, alpha=0.7) +
      stat_summary(fun=mean, geom="point", shape=18, size=4, color="black",
                   position=position_dodge(width=0.5)) +
      scale_color_manual(values=c("Normal"="grey40","Tumor"="darkred")) +
      scale_y_log10() +
      labs(y="Fold Change (log scale)", x="") +
      facet_wrap(~Target, scales="free_x", ncol=3) +
      theme_classic() +
      theme(legend.position="none",
            strip.text=element_text(size=12,face="bold"),
            axis.text.x=element_text(size=10))
  })

  output$barPlot <- renderPlot({
    req(input$selectedBarTargets)
    pm <- perMiRNAMeans() %>% filter(Target %in% input$selectedBarTargets)
    norm_bar <- pm %>% filter(Type=="Normal") %>% summarise(mean_fold=mean(mean_fold_change, na.rm=TRUE))
    norm_bar <- tibble(Label="Normal", mean_fold=norm_bar$mean_fold, Group="Normal")
    tumor_bars <- pm %>% filter(Type=="Tumor") %>% transmute(Label=Target, mean_fold=mean_fold_change, Group="Tumor")
    bar_data <- bind_rows(norm_bar, tumor_bars)
    bar_data$Label <- factor(bar_data$Label, levels=rev(bar_data$Label))
    ggplot(bar_data, aes(y=Label, x=mean_fold, fill=Group)) +
      geom_col(width=0.6) +
      geom_vline(xintercept=1, linetype="dashed", color="gray40") +
      scale_fill_manual(values=c("Normal"="grey40","Tumor"="darkred")) +
      labs(title="Fold Change: Overall Normal vs Tumor per miRNA",
           x="Fold Change (log scale)", y="") +
      scale_x_log10() +
      theme_minimal() +
      theme(axis.text.x=element_text(angle=0, hjust=0.5))
  })

  output$summaryTable <- renderTable({
    perMiRNAMeans() %>% arrange(Target, match(Type,c("Normal","Tumor")))
  })

  output$allROCPlots <- renderPlot({
    req(input$selectedTargets)
    df <- foldChangeData()

    par(mfrow = c(2, 4), mar = c(4, 4, 3, 1))

    # Individual ROCs
    for (miR in input$selectedTargets) {
      df_miR <- df %>% filter(Target == miR)
      if(length(unique(df_miR$Type)) < 2) next
      df_miR$outcome <- ifelse(df_miR$Type == "Tumor", 1, 0)
      roc_obj <- roc(df_miR$outcome, df_miR$fold_change, levels = c(0,1), direction = "<")
      roc_obj_df <- data.frame(`1-specificity`=1-roc_obj$specificities, Sensitivity=roc_obj$sensitivities)
      plot(roc_obj_df, main = miR, xlim = c(0,1), ylim = c(0,1), type="l")
      lines(c(0,1),c(0,1), col="black")
      legend("bottomright", legend = paste("AUC =", round(auc(roc_obj), 3)))
    }

    # Combined ROC of all selected miRNAs
    df_comb <- df %>% filter(Target %in% input$selectedTargets)
    df_wide <- df_comb %>%
      group_by(Sample, Target, Type) %>%
      summarise(fold_change = mean(fold_change, na.rm = TRUE), .groups = "drop") %>%
      pivot_wider(names_from = Target, values_from = fold_change)

    if(length(unique(df_wide$Type)) > 1){
      df_wide$outcome <- ifelse(df_wide$Type == "Tumor", 1, 0)
      # Sum all fold changes as a simple combined score
      fold_cols <- setdiff(names(df_wide), c("Sample","Type","outcome"))
      df_wide$combined_score <- rowSums(df_wide[, fold_cols], na.rm = TRUE)
      combined_roc <- roc(df_wide$outcome, df_wide$combined_score, levels = c(0,1), direction = "<")
      plot(combined_roc, main = "Combined ROC", xlim = c(0,1), ylim = c(0,1))
      legend("bottomright", legend = paste("AUC =", round(auc(combined_roc),3)))
    }
  })
}

shinyApp(ui = ui, server = server)
